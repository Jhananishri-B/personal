version: '3.8'

services:
  # Frontend - Web Application
  web-frontend:
    build:
      context: ./apps/web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./apps/web-frontend:/app
      - /app/node_modules
    depends_on:
      - api

  # Frontend - Admin Panel
  admin-frontend:
    build:
      context: ./apps/admin-frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./apps/admin-frontend:/app
      - /app/node_modules
    depends_on:
      - api

  # Backend API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/learnquest
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./services/api:/app
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Background Worker
  worker:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/learnquest
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./services/worker:/app
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Code Runner Service
  runner:
    build:
      context: ./apps/runner
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - JUDGE0_URL=${JUDGE0_URL}
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=learnquest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-frontend
      - admin-frontend
      - api
    restart: unless-stopped

  # Vector Database (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

networks:
  default:
    name: learnquest-network
